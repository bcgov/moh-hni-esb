# This is a manual workflow that performs following activities:
# 1. Determine the version number tag i.e. Release_1.0_<branch-name>_<build execution>  
# 2. Determine tags for OpenShift image
# 3. Run the maven install for client code
# 4. Run the maven install for hnsesb code
# 5. Pass the foder to OpenShift build and start the build
# 6. Tag the image in namespace with build tag.
# 7. if build succesful Move the image from tools namespace to the environment


name: release-hniesb

# Build the image and deploy in OpenShift test environment
env:
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: image-registry.apps.silver.devops.gov.bc.ca/c5839f-tools
  IMAGE_REGISTRY_USER: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_USER }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_TOKEN }}
  IMAGE_NAME: hniesb
  IMAGE_TAGS: 
  RELEASE_VERSION:
  OPENSHIFT_IMAGE_SHA:
  #Required if we are deploying as well in this workflow.
  #TESTNS_IMAGE_REGISTRY: image-registry.apps.silver.devops.gov.bc.ca/c5839f-test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, 5915-hniesb-rel-workflow ]

  # The user specifies the optional tag  
  # --------------------------------------------------------------------------
  workflow_dispatch:
    inputs:
      OPENSHIFT_IMAGE_TAG:
        description: 'Optional parameter for additional tags on released images. '
        required: false
        default:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "createHniEsbRelease"
  createHniEsbRelease:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # It should get the code from branch that triggered this workflow
      - name: Check out code
        id: checkout
        uses: actions/checkout@v3

      # 1. Determine the version number tag i.e. Release_1.0_<branch-name>_<build execution> 
      - name: Determine Version number
        # Branch name is fixed to 'main' in version identifier
        run: |
          echo "RELEASE_VERSION=Release_1.0_${{github.ref_name}}_${{github.run_number}}" | tee -a $GITHUB_ENV
        
      # 2. Determine tags for OpenShift image
      - name: Determine image tags
        run: |
          echo "IMAGE_TAGS= ${GITHUB_SHA::12} ${{ env.RELEASE_VERSION }} ${{ github.event.inputs.OPENSHIFT_IMAGE_TAG }}  " | tee -a $GITHUB_ENV

      # Support step .. can be removed after development is complete
      - name: Print values
        run: |
          echo "Branch in use: ${{ github.ref_name }}"
          echo "Run number: ${{ github.run_number }}"
          echo "Release version: ${{ env.RELEASE_VERSION }}"
          echo "Image tags: ${{ env.IMAGE_TAGS }}"
          echo "Full commit version: ${{github.sha}}"
          echo "12 digits commit version#1: ${GITHUB_SHA::12}"
          mvn -version

      # Run the maven install for client code
      - name: Maven run for client code
        run: |
          cd ${{github.workspace}}/hn-common
          mvn install

      # Run the maven install for hnsesb code
      - name: Maven run for hnsecure code
        run: |
          cd ${{github.workspace}}/hnsecure
          mvn install -Dimpl-version=${{ env.RELEASE_VERSION }} -Dgit-commit=${GITHUB_SHA::12}
      # Build from docker file
      - name: Build hnsesb image from Dockerfile
        id: build-docker-hniesb
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAGS }}
          context: ./hnsecure
          dockerfiles: |
            ./hnsecure/Dockerfile

      # Upload the images in image repository in tools namespace
      - name: Push image to registry
        id: push-image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-docker-hniesb.outputs.image }}
          tags: ${{ steps.build-docker-hniesb.outputs.tags }}
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ env.IMAGE_REGISTRY_USER }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}
        
      # Push the image sha in env variables for use in next job
      - name: Set image sha
        id: set-image-sha
        run: |
          echo "OPENSHIFT_IMAGE_SHA=${{ steps.push-image.outputs.digest }}" | tee -a $GITHUB_ENV
  
  
  # This job updates the Gitops repository with image created in  this workflow. 
  # Updating the image in Deployment.yml will result in deploying that image in OpenShift
  Deploy:
    runs-on: ubuntu-latest
    needs: [createHniEsbRelease]
    
    steps:
      - name: Step to move image to test namespace
        run: |
          echo "This step should move the image to repository to test namespace"
      
      - name: Prepare deploy key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.GITOPS_C5839F_PRIVATE_KEY }}

      - name: Check out manifest repo
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GITOPS_C5839F_PRIVATE_KEY }}
          repository: ${{ secrets.GITOPS_C5839F_REPO }}
          ref: 5917-hnsecure-argocd

      # - name: Set up Kustomize
      #   uses: imranismail/setup-kustomize@v1

      # - name: Update image ID and commit change
      #   if: ${{ success() }}
      #   run: |
      #     cd hniesb-devops/overlays/dev
      #     kustomize edit set image "hnsesb-image=image-registry.openshift-image-registry.svc:5000/c5839f-dev/hnsesb@${{ env.BACKEND_IMAGE_ID }}"
      #     git config --local user.email "action@github.com"
      #     git config --local user.name "GitHub Action"
      #     git commit -am "Update image ids using release workflow."
      #     git push origin    
       
      - name: Print messages
        run: |
          echo "Image digest is ${{ github.OPENSHIFT_IMAGE_SHA }}"
          echo "Image digest using job id ${{ jobs.createHniEsbRelease.steps.push-image.outputs.digest }}"
          echo "Job complete"
        
      
  
  
  # This job creates a tag in Git repository with same name as release tag
  createTagInGit:
    runs-on:  ubuntu-latest
    needs: [Deploy]
    steps:
      - id: create-tag
        run: |
          echo "This step should add tag"
  
          
