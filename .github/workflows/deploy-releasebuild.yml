# This is a deployment workflow to deploy a selected release in selected environment
# Steps are:
# 1. Login to OpenShift
# 2. Find the image digest from input parameters
# 3. Validate if that is correct. If not, exit the job
# 4. Push the image to selected repository
# 5. Edit the selcted Argo CD manifest file


name: deploy-release-build-hnsesb

env:
  OPENSHIFT_SERVER: ${{secrets.C5839F_OPENSHIFT_SERVER}}
  OPENSHIFT_TOKEN: ${{secrets.C5839F_OPENSHIFT_GITHUB_ACTIONS_SA_TOKEN}}
  IMAGE_NAME: hnsesb
  DEFAULT_NAMESPACE: "c5839f-tools"
  TARGET_NAMESPACE:
  VERSION_PREFIX: "Release-1.0-main-"
  IMAGE_ID:

# Controls when the workflow will run
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      Environment:
        type: choice
        description: Select an environment to deploy
        options:
        - dev
        - test
        - sandbox
        - production
      Release:
        description: 'Enter build number: '
        required: true
        default: 1

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # 1. Login to OpenShift
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{env.OPENSHIFT_SERVER}}
          openshift_token: ${{env.OPENSHIFT_TOKEN}}
          insecure_skip_tls_verify: true
          namespace: ${{env.DEFAULT_NAMESPACE}}
      # 2. Find the namespace and image digest from input parameters
      - name: Compute namespace
        id: set-namespace
        uses: actions/github-script@v5
        with:
          script: |
            if (`${{github.event.inputs.Environment}}` == 'dev') {
              return "c5839f-dev"
            }
            if (`${{github.event.inputs.Environment}}` == 'test' || `${{github.event.inputs.Environment}}` == 'sandbox') {
              return "c5839f-test"
            }
            if (`${{github.event.inputs.Environment}}` == 'production') {
              return "c5839f-prod"
            }

      - name: Compute Version image
        run: |
          echo "TARGET_NAMESPACE=${{steps.set-namespace.outputs.result}}"  | tee -a $GITHUB_ENV
          echo "VERSION=${{env.VERSION_PREFIX}}${{github.event.inputs.Release}}"  | tee -a $GITHUB_ENV

      - name: Find image
        run: |
          oc project
          echo "IMAGE_ID=$(oc get istag/${{env.IMAGE_NAME}}:${{env.VERSION}} -o jsonpath={.image.metadata.name})" | tee -a $GITHUB_ENV

      # 3. Validate if that is correct. If not, exit the job
      - name: Validate image
        uses: actions/github-script@v4
        with:
          script: |
            if (`${{env.IMAGE_ID}}`.length == 0 || `${{env.IMAGE_ID}}`.length == 0) {
              core.setFailed(`❌ Image version: ${{env.VERSION}}. \n` +
                "Please provide a valid image build number." );
            }
            else {
              core.info(`✅ Valid image found.`);
            }
      # 4. Push the image to selected repository
      # - name: Push Image
      #   run: |
      #     oc tag ${{env.IMAGE_ID}}:${{env.VERSION}} ${{env.TARGET_NAMESPACE}}/${{env.IMAGE_NAME}}:${{env.VERSION}}

      # 5. Edit the selcted Argo CD manifest file
      # Update the image ID in the manifest repository used by Argo CD.
      # We need to use the SSH deploy key to check out the manifest repo, set up
      # Kustomize in the runner, update the image ID, commit the change, and
      # push the changes back to the manifest repository.
      # ------------------------------------------------------------------------
      # - name: Prepare deploy key
      #   uses: webfactory/ssh-agent@v0.5.3
      #   with:
      #     ssh-private-key: ${{secrets.GITOPS_C5839F_PRIVATE_KEY}}

      # - name: Check out manifest repo
      #   uses: actions/checkout@v2
      #   with:
      #     ssh-key: ${{secrets.GITOPS_C5839F_PRIVATE_KEY}}
      #     repository: ${{secrets.GITOPS_C5839F_REPO}}
      #     ref: 5918-Set-up-HNSecure-Test-and-Sandbox-via-ArgoCD

      # - name: Set up Kustomize
      #   uses: imranismail/setup-kustomize@v1

      - name: Determine Kustomize folder location
        id: get-kustomize-folder
        uses: actions/github-script@v5
        with:
          script: |
            if (`${{github.event.inputs.Environment}}` == 'dev') {
              return "dev"
            }
            if (`${{github.event.inputs.Environment}}` == 'test') {
              return "test"
            }
            if (`${{github.event.inputs.Environment}}` == 'sandbox') {
              return "sbx"
            }
            if (`${{github.event.inputs.Environment}}` == 'production') {
              return "prod"
            }
            else{
              core.setFailed(`❌ Invalid input for environment` );
            }

      - name: Update image ID and commit change
        if: ${{success()}}
        run: |
          echo "Folder location is ${{steps.get-kustomize-folder.outputs.result}}"          

        # cd mspdirect-devops/overlays/${{github.event.inputs.Environment}}
        # kustomize edit set image "backend-image=image-registry.openshift-image-registry.svc:5000/${{env.OPENSHIFT_NAMESPACE}}/${{env.BACKEND_IMAGE_NAME}}@${{env.BACKEND_IMAGE_ID}}"
        # kustomize edit set image "frontend-image=image-registry.openshift-image-registry.svc:5000/${{env.OPENSHIFT_NAMESPACE}}/${{env.FRONTEND_IMAGE_NAME}}@${{env.FRONTEND_IMAGE_ID}}"
        # git config --local user.email "action@github.com"
        # git config --local user.name "GitHub Action"
        # git commit -am "Update frontend and backend image ids using deploy workflow."
        # git push origin    
          