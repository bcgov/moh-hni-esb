apiVersion: v1
kind: Template
labels:
  template: ${LABEL}
  app: ${LABEL}
metadata:
  annotations:
    description: Creates the hnsesb setup for a namespace that includes- bc, dc, route, service and network policy.
    #find the icon for this    
    #iconClass: icon-jenkins
    tags: instant-app,${LABEL}
  #change this value
  name: hnsesb-ephemeral
parameters:
- name: NAMESPACE
  description: Namespace variable. Update this value to the namespace where we want to create this template.
  required: true
  value: c5839f-tools
  #
- name: APP_NAME
  description: Application name. This value will be used for application name and route URL
  value: hnsesb-test  
  required: true
  #
- name: LABEL
  description: Main label. This value is used for all API object. To get all all objects, we can use this value as label for selector.
  value: hnsesb-test
  required: true
  #
- name: REPO
  description: Image repository
  value: image-registry.openshift-image-registry.svc:5000/c5839f-tools/
  required: true
  #
- name: IMAGE
  description: Image repository
  value: hnsesb-ephimeral
  required: true
  #  
- name: TAG
  description: Tag for image
  value: hnsesb-ephimeral
  required: true  
  #
- name: PHARMANET_CERT_BASE64
  description: Base64 string for pharmanet pfx certificate
  required: true
  value: <placeholder>
  #
- name: DATABASE_NAME
  description: Database name required for setting up database
  required: true
  value: <placeholder>
  #
- name: DATABASE_USER
  description: Database user required for setting up database
  required: true
  value: <placeholder>
  #
- name: DATABASE_PASSWORD
  description: Database password required for setting up database
  required: true
  value: <placeholder>
  #
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: pharmanet-cert-secret-${APP_NAME}
  data:
    pharma-cert: ${PHARMANET_CERT_BASE64}
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    #labels:
    #  app: ${LABEL}
    name: ${APP_NAME}-allow-apiportal
  spec:
    podSelector: 
      matchLabels:
        app: ${LABEL}
    #{} in ingress means allow-all
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            environment: test
            name: 264e6f
    - from:
      - namespaceSelector:
          matchLabels:
            environment: prod
            name: 264e6f
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    #labels:
    #  app: ${LABEL}
    name: ${APP_NAME}-allow-all
  spec:
    podSelector: 
      matchLabels:
        app: ${LABEL}
    #{} in ingress means allow-all
    ingress:
    - {}
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: ${APP_NAME}-allow-same-namespace
  spec:
    podSelector: 
      matchLabels:
        app: ${APP_NAME}-pgsql
    ingress:
    - from:
      - podSelector:
          matchLabels:
            app: ${APP_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}
  spec:
    ports:
    - name: 14885-tcp
      protocol: TCP
      port: 14885
      targetPort: 14885
    selector:
      app: ${LABEL}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-pgsql
  spec:
    ports:
    - name: ${APP_NAME}-pgsql
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      app: ${APP_NAME}-pgsql
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APP_NAME}
  spec:
    host: ${APP_NAME}.apps.silver.devops.gov.bc.ca
    to:
      kind: Service
      name: ${APP_NAME}
    port:
      targetPort: 14885-tcp
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APP_NAME}
  spec:
    source:
      type: Binary
      binary: {}      
    output:
      to:
        kind: "ImageStreamTag"
        namespace: "${NAMESPACE}"
        name: "${IMAGE}:${TAG}"
    strategy:
      type: Docker
      dockerStrategy:
        pullSecret:
          name: docker-hub
        # Find the image build instructions in ./Dockerfile
        dockerfilePath: Dockerfile
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app.kubernetes.io/part-of: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 2
    selector:
      app: ${LABEL}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${LABEL}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
        - name: ${APP_NAME}
          image: >-
            "${REPO}${IMAGE}:${TAG}"
          ports:
          - containerPort: 14885
            protocol: TCP
          volumeMounts:
          - mountPath: /tmp/keystore
            name: pharmanet-cert
            readOnly: true
          - mountPath: /tmp/properties
            name: application-external
        volumes:
        - name: pharmanet-cert
          secret:
            items:
            - key: pharma-cert
              path: CGI-HNI-DEV.pfx
            secretName: pharmanet-cert-secret-${APP_NAME}
        - configMap:
            name: ${APP_NAME}
          name: application-external
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          namespace: ${NAMESPACE}
          name: ${IMAGE}:${TAG}
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app.kubernetes.io/part-of: ${APP_NAME}
    name: ${APP_NAME}-pgs-dc
  spec:
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      activeDeadlineSeconds: 21600
    replicas: 2
    revisionHistoryLimit: 10
    test: false
    selector:
      app: ${APP_NAME}-pgsql
    template:           
      metadata:
        labels:
          app: ${APP_NAME}-pgsql
      spec:
        containers:
          - resources:
              limits:
                memory: 512Mi
            readinessProbe:
              exec:
                command:
                  - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: /dev/termination-log
            name: postgresql
            livenessProbe:
              exec:
                command:
                  - /usr/libexec/check-container
                  - '--live'
              initialDelaySeconds: 120
              timeoutSeconds: 10
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            env:
              - name: POSTGRESQL_USER
                value: ${DATABASE_USER}
              - name: POSTGRESQL_PASSWORD
                value: ${DATABASE_PASSWORD}
              - name: POSTGRESQL_DATABASE
                value: ${DATABASE_NAME}
            securityContext:
              capabilities: {}
              privileged: false
            ports:
              - containerPort: 5432
                protocol: TCP
            image: >-
              image-registry.openshift-image-registry.svc:5000/openshift/postgresql@sha256:276f2ee5b269cf2ba996900448a6112caf2e0a1517d0de424c1679d65009a0c6