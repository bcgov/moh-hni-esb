// This pipeline is created to build the application using build config and then deploy using deployment config
pipeline {
	parameters {
		choice(name: 'NAMESPACE', choices: ['Dev', 'Test'], description: 'Project namespace in openshift where you want to create this application')
		string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Name of the branch')
		
	}
	
	environment {
		CLUSTER = "openshift"
    	OC_JENKINS_USER = "deployer-c5839f-tools"
		PROJECT = project()
		BUILD_NAME = appName()
		IMAGE_STREAM = "image-registry.openshift-image-registry.svc:5000/${PROJECT}/${BUILD_NAME}:latest"
		
	}
    agent any
    stages {
        stage("Checkout") {
            steps {
                // Get some code from a GitHub repository
                echo "Getting code from main"
                git branch: "${BRANCH_NAME}", url: "https://github.com/bcgov/moh-hni-esb"
            }
        }
 		stage("Package hn-common library") {
            steps {
                dir("hn-common") {
                    echo "Running: mvn install"
                    sh "mvn install"
                }	
            }
        }
        stage("Package hnsecure library") {
            steps {
                dir("hnsecure") {
                    echo "Running: mvn install"
                    sh "mvn install"
                }	
            }
        }        
        stage("Start Openshift build process") {
            steps {
				script{
					openshift.withCluster( "${CLUSTER}" ) {
                        openshift.withCredentials( "${OC_JENKINS_USER}" ) {
                            openshift.withProject("${PROJECT}"){
								echo "Using project: ${openshift.project()} in cluster ${openshift.cluster()} "
								def bcSelector = openshift.selector( "buildconfig", "${BUILD_NAME}")
								echo "Build name ${BUILD_NAME} exist in project ${PROJECT}." 
								def buildRun = bcSelector.startBuild("--from-dir",".")
								buildRun.logs('-f')
								
								//def builds = bcSelector.related('builds')
								
								timeout (time: 2, unit: 'MINUTES') {
									if (buildRun.object().status.phase == "Complete"){
										return true
									}
								}
								// If build is complete add tagging
								def buildStatus = buildRun.object().status.phase
								if("Complete"==buildStatus){
									echo "Build status is ${buildStatus}.  Image created is ${IMAGE_STREAM}"
									echo "Tagging the build with build tag: ${BUILD_TAG}"
									openshift.tag( "${IMAGE_STREAM}", "${BUILD_NAME}:${BUILD_TAG}")
								}
								// if build is a failure, process should failure
								else{
									echo "Build status is ${bStatus}."
									sh 'false'
								}
								
								// Check deployment status
								def dcSelector = openshift.selector( "dc", "${BUILD_NAME}")
								dcSelector.logs('-f')
								def dStatus = dcSelector.object().status.phase
								def latestDeploymentVersion = openshift.selector('dc',"${BUILD_NAME}").object().status.latestVersion
								def rc = openshift.selector('rc', "${BUILD_NAME}-${latestDeploymentVersion}")
								timeout (time: 5, unit: 'MINUTES') {
									rc.untilEach(1){
										def rcMap = it.object()
										return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
									}
								}
								echo "Deployment status ${dStatus}"
								
							}
						}
					}
				}
            }
        }
    }
    post {
        always {
            echo "Complete"
        }
    }
}
def project() {
	def ns = "${NAMESPACE}"
	return "c5839f-" + ns.toLowerCase()
}
def appName() {
	def ns = "${NAMESPACE}"
	return "hnsesb-" + ns.toLowerCase()
}