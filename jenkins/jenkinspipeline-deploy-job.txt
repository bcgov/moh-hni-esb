// This pipeline will deploy the provided build number to selected environment
pipeline {
	parameters {
		choice(name: 'NAMESPACE', choices: ['Dev', 'Test'], description: 'Project namespace in openshift where you want to create this application')
		text(name: 'Application', defaultValue: 'hnsesb-sample', description: 'Enter the name of application. If not known, get this value from URL. For example URL be: http://hnsesb-sample.apps.silver.devops.gov.bc.ca/ for app hnsesb-sample. If application does not exist, this job will fail')
		choice(name: 'DEPLOY_BUILD_TYPE', choices: ['Feature', 'Release'], description: 'Feature build is created from hnsesb-buildAndDeploy job. Release build is created from hnsesb-release-buildAndDeploy job.')
		string(name: 'DEPLOY_BUILD_NUMBER', defaultValue: '', description: 'Build number in text from hnsesb-buildAndDeploy job for Feature build and hnsesb-release-buildAndDeploy job for Release build.')
	}

    environment {
    	// Input from user: NAMESPACE and DEPLOY_BUILD_NUMBER
    	CLUSTER = "openshift"
    	BUILD_DEPLOY_TAG = deployTag()
		OC_JEKNINS_USER = "deployer-c5839f-tools"
		PROJECT = project()
		TOOLS_PROJECT = "c5839f-tools"
		APP_NAME = lower()

		IMAGE_STREAM = "image-registry.openshift-image-registry.svc:5000/c5839f-tools/hnsesb"
		IMAGE_STREAM_TAG = "imagestreamtag/hnsesb:${BUILD_DEPLOY_TAG}"
		
		APPLY_TAG=lower()
		//eg : imagestreamtag/hnsesb:BUILD-DEPLOY-12 
	}
	
    agent any

    stages {
        stage('Verify if application and build exists') {
            steps {
            	script {
                    openshift.withCluster( "${CLUSTER}" ) {
                        openshift.withCredentials( "${OC_JEKNINS_USER}" ) {
                            openshift.withProject("${TOOLS_PROJECT}"){
                            	// Checking if build exists
                                echo "Using project: ${openshift.project()} in cluster ${openshift.cluster()} "
                                def is = openshift.selector( "imagestreamtag/hnsesb:${BUILD_DEPLOY_TAG}").object()
								// Job will fail if object does not exist
								def name = is.metadata.name
								echo "name is ${name}"
								
                            }
							openshift.withProject("${PROJECT}"){
                                // Checking if application exists
                                echo "Using project: ${openshift.project()} in cluster ${openshift.cluster()} "
                                echo "Checking if application exists"
								def podObj =  openshift.selector( 'pods', [ app: '${APP_NAME}' ] ).object()
								def podStatus =  podObj.status.phase
                                if ("${podStatus}"=='Running'){
                                	echo 'Application exists'
                                }
                                else {
                                	echo "${APP_NAME} Application does not exist. So exiting the job"
                                	sh 'False'
                                }
                            }
                        }
                    }            		
            	}
            }
            
        }

        stage ('Deploy selected build to project') {
            steps {
                script {
                    openshift.withCluster( "${CLUSTER}" ) {
                        openshift.withCredentials( "${OC_JEKNINS_USER}" ) {
                            openshift.withProject("${TOOLS_PROJECT}"){
                                echo "Tag the build ${IMAGE_STREAM}:${BUILD_DEPLOY_TAG} with tag: ${APPLY_TAG} "
                                openshift.tag( "${IMAGE_STREAM}:${BUILD_DEPLOY_TAG}", "c5839f-tools/hnsesb:${APP_NAME}")
                            }
                        }
                    }
                }
            }
        }
    }
}
def project() {
	def ns = "${NAMESPACE}"
	return "c5839f-" + ns.toLowerCase()
}
def lower() {
	def app = "${Application}"
	return app.toLowerCase()
}
def deployTag(){
	def tag = "BUILD-DEPLOY-${DEPLOY_BUILD_NUMBER}"
	if ("${DEPLOY_BUILD_TYPE}"=='Release'){
		tag = "RELEASE-BUILD-DEPLOY-${DEPLOY_BUILD_NUMBER}"
	}
	return tag
}